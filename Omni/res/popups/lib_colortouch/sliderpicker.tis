class Sliderpicker
{
	const SIZE = 146;

	function attached()
	{
		var in_slider_drag;
		var el_sliderpicker = this;

		this.onMouse = function(evt)
		{
			switch(evt.type)
			{
			case Event.MOUSE_DOWN:
				el_sliderpicker.pos = this[0].style#left = evt.x.limit(0, SIZE);
				el_sliderpicker.onUpdatePos(el_sliderpicker.pos.toFloat() / SIZE, false);

				in_slider_drag = true;
				this.capture(#strict);
				break;

			case Event.MOUSE_MOVE:
				if(in_slider_drag)
				{
					el_sliderpicker.pos = this[0].style#left = evt.x.limit(0, SIZE);
					el_sliderpicker.onUpdatePos(el_sliderpicker.pos.toFloat() / SIZE, false);
				}
				break;

			case Event.MOUSE_LEAVE:
			case Event.MOUSE_UP:
				if(in_slider_drag)
				{
					this.capture(false);
					in_slider_drag = false;
					el_sliderpicker.onUpdatePos(el_sliderpicker.pos.toFloat() / SIZE, false);
				}
				break;

			case Event.MOUSE_WHEEL:
				el_sliderpicker.pos = el_sliderpicker[0].style#left = (el_sliderpicker[0].style#left.toInteger() + evt.wheelDelta*-1).limit(0, SIZE);
				el_sliderpicker.onUpdatePos(el_sliderpicker.pos.toFloat() / SIZE, false);
				break;
			}
		}
	}

	function setValue(p)
	{
		this.pos = this[0].style#left = p*SIZE;
		this.onUpdatePos(p, true);
	}

	// overridable
	function onUpdatePos(p) {}
}